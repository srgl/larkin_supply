---
- hosts: application
  sudo: yes
  gather_facts: no
  tasks:
    - name: Include inventory specific variables
      include_vars: "{{ item }}"
      ignore_errors: yes
      with_items:
        - vars/{{ inventory_file }}.yml
        - vars/{{ inventory_file }}_secrets.yml

    - set_fact: release_path="{{ app_path }}/releases/{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    - debug: msg='New release path {{ release_path }}'

    - name: Create new release dir
      file: path={{ release_path }} state=directory
      sudo_user: '{{ user_name }}'

    - name: Get the code into temp directory
      git: repo={{ git_url }} dest=/tmp/{{ app_name }} version={{ branch }} accept_hostkey=yes
      sudo: no

    - name: Move the code to release directory
      shell: mv /tmp/{{ app_name }}/* /tmp/{{ app_name }}/.[!.]* {{ release_path }}

    - name: Chown the code
      file: path={{ release_path }} recurse=yes owner={{ user_name }}

    - name: Create .env file
      template: src=templates/env.j2 dest={{ release_path }}/.env mode=0600
      sudo_user: '{{ user_name }}'

    - name: Symlink shared files
      file: src={{ app_path }}/shared/{{ item }} dest={{ release_path }}/{{ item }} state=link force=yes
      sudo_user: '{{ user_name }}'
      with_items:
        - config/database.yml
        - tmp

    - name: Install bundle
      command: bash -cl 'bundle install --without="development test"'
      args:
        chdir: '{{ release_path }}'
      sudo_user: '{{ user_name }}'

    - name: Precompile assets
      command: bash -cl 'bundle exec rake assets:precompile' chdir={{ release_path }}
      environment:
        RAILS_ENV: production
      sudo_user: '{{ user_name }}'

    - name: Migrate database
      command: bash -cl 'bundle exec rake db:migrate' chdir={{ release_path }}
      environment:
        RAILS_ENV: production
      sudo_user: '{{ user_name }}'

    - name: Symlink new release
      file: src={{ release_path }} dest={{ app_path }}/current state=link force=yes
      sudo_user: '{{ user_name }}'

    - name: Start puma if not started
      service: name={{ app_name }} state=started

    - name: Restart puma
      service: name={{ app_name }} state=restarted

    - name: Restart nginx
      service: name=nginx state=restarted

    - name: Remove old releases
      shell: "ls -1t {{ app_path }}/releases|tail -n +6|xargs rm -rf"
      args:
        chdir: '{{ app_path }}/releases'
